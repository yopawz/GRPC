// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageEmployeeClient is the client API for ManageEmployee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageEmployeeClient interface {
	GetAllEmployees(ctx context.Context, in *GetAllEmployeesParams, opts ...grpc.CallOption) (*EmployeeList, error)
	InsertEmployee(ctx context.Context, in *InsertEmployeeParams, opts ...grpc.CallOption) (*Response, error)
	UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Response, error)
	DeleteEmployee(ctx context.Context, in *DeleteEmployeeParams, opts ...grpc.CallOption) (*Response, error)
	GetEmployeeWithId(ctx context.Context, in *GetEmployeeWithIdParams, opts ...grpc.CallOption) (*Employee, error)
}

type manageEmployeeClient struct {
	cc grpc.ClientConnInterface
}

func NewManageEmployeeClient(cc grpc.ClientConnInterface) ManageEmployeeClient {
	return &manageEmployeeClient{cc}
}

func (c *manageEmployeeClient) GetAllEmployees(ctx context.Context, in *GetAllEmployeesParams, opts ...grpc.CallOption) (*EmployeeList, error) {
	out := new(EmployeeList)
	err := c.cc.Invoke(ctx, "/proto.ManageEmployee/GetAllEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageEmployeeClient) InsertEmployee(ctx context.Context, in *InsertEmployeeParams, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.ManageEmployee/InsertEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageEmployeeClient) UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.ManageEmployee/UpdateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageEmployeeClient) DeleteEmployee(ctx context.Context, in *DeleteEmployeeParams, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.ManageEmployee/DeleteEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageEmployeeClient) GetEmployeeWithId(ctx context.Context, in *GetEmployeeWithIdParams, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/proto.ManageEmployee/GetEmployeeWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageEmployeeServer is the server API for ManageEmployee service.
// All implementations must embed UnimplementedManageEmployeeServer
// for forward compatibility
type ManageEmployeeServer interface {
	GetAllEmployees(context.Context, *GetAllEmployeesParams) (*EmployeeList, error)
	InsertEmployee(context.Context, *InsertEmployeeParams) (*Response, error)
	UpdateEmployee(context.Context, *Employee) (*Response, error)
	DeleteEmployee(context.Context, *DeleteEmployeeParams) (*Response, error)
	GetEmployeeWithId(context.Context, *GetEmployeeWithIdParams) (*Employee, error)
	mustEmbedUnimplementedManageEmployeeServer()
}

// UnimplementedManageEmployeeServer must be embedded to have forward compatible implementations.
type UnimplementedManageEmployeeServer struct {
}

func (UnimplementedManageEmployeeServer) GetAllEmployees(context.Context, *GetAllEmployeesParams) (*EmployeeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEmployees not implemented")
}
func (UnimplementedManageEmployeeServer) InsertEmployee(context.Context, *InsertEmployeeParams) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEmployee not implemented")
}
func (UnimplementedManageEmployeeServer) UpdateEmployee(context.Context, *Employee) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedManageEmployeeServer) DeleteEmployee(context.Context, *DeleteEmployeeParams) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedManageEmployeeServer) GetEmployeeWithId(context.Context, *GetEmployeeWithIdParams) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeWithId not implemented")
}
func (UnimplementedManageEmployeeServer) mustEmbedUnimplementedManageEmployeeServer() {}

// UnsafeManageEmployeeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageEmployeeServer will
// result in compilation errors.
type UnsafeManageEmployeeServer interface {
	mustEmbedUnimplementedManageEmployeeServer()
}

func RegisterManageEmployeeServer(s grpc.ServiceRegistrar, srv ManageEmployeeServer) {
	s.RegisterService(&ManageEmployee_ServiceDesc, srv)
}

func _ManageEmployee_GetAllEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEmployeesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageEmployeeServer).GetAllEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManageEmployee/GetAllEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageEmployeeServer).GetAllEmployees(ctx, req.(*GetAllEmployeesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageEmployee_InsertEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertEmployeeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageEmployeeServer).InsertEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManageEmployee/InsertEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageEmployeeServer).InsertEmployee(ctx, req.(*InsertEmployeeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageEmployee_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageEmployeeServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManageEmployee/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageEmployeeServer).UpdateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageEmployee_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageEmployeeServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManageEmployee/DeleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageEmployeeServer).DeleteEmployee(ctx, req.(*DeleteEmployeeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageEmployee_GetEmployeeWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeWithIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageEmployeeServer).GetEmployeeWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManageEmployee/GetEmployeeWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageEmployeeServer).GetEmployeeWithId(ctx, req.(*GetEmployeeWithIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageEmployee_ServiceDesc is the grpc.ServiceDesc for ManageEmployee service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageEmployee_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ManageEmployee",
	HandlerType: (*ManageEmployeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllEmployees",
			Handler:    _ManageEmployee_GetAllEmployees_Handler,
		},
		{
			MethodName: "InsertEmployee",
			Handler:    _ManageEmployee_InsertEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _ManageEmployee_UpdateEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _ManageEmployee_DeleteEmployee_Handler,
		},
		{
			MethodName: "GetEmployeeWithId",
			Handler:    _ManageEmployee_GetEmployeeWithId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc/service.proto",
}
