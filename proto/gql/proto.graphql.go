// Code generated by proroc-gen-graphql, DO NOT EDIT.
package proto

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_UpdateEmployeeWithGQLParams     *graphql.Object      // message UpdateEmployeeWithGQLParams in proto/gql/gql.proto
	gql__type_ResponseGQL                     *graphql.Object      // message ResponseGQL in proto/gql/gql.proto
	gql__type_InsertEmployeeWithGQLParams     *graphql.Object      // message InsertEmployeeWithGQLParams in proto/gql/gql.proto
	gql__type_GetEmployeeWithIdWithGQLParams  *graphql.Object      // message GetEmployeeWithIdWithGQLParams in proto/gql/gql.proto
	gql__type_EmployeeListGQL                 *graphql.Object      // message EmployeeListGQL in proto/gql/gql.proto
	gql__type_EmployeeGQL                     *graphql.Object      // message EmployeeGQL in proto/gql/gql.proto
	gql__type_DeleteEmployeeWithGQLParams     *graphql.Object      // message DeleteEmployeeWithGQLParams in proto/gql/gql.proto
	gql__input_UpdateEmployeeWithGQLParams    *graphql.InputObject // message UpdateEmployeeWithGQLParams in proto/gql/gql.proto
	gql__input_ResponseGQL                    *graphql.InputObject // message ResponseGQL in proto/gql/gql.proto
	gql__input_InsertEmployeeWithGQLParams    *graphql.InputObject // message InsertEmployeeWithGQLParams in proto/gql/gql.proto
	gql__input_GetEmployeeWithIdWithGQLParams *graphql.InputObject // message GetEmployeeWithIdWithGQLParams in proto/gql/gql.proto
	gql__input_EmployeeListGQL                *graphql.InputObject // message EmployeeListGQL in proto/gql/gql.proto
	gql__input_EmployeeGQL                    *graphql.InputObject // message EmployeeGQL in proto/gql/gql.proto
	gql__input_DeleteEmployeeWithGQLParams    *graphql.InputObject // message DeleteEmployeeWithGQLParams in proto/gql/gql.proto
)

func Gql__type_UpdateEmployeeWithGQLParams() *graphql.Object {
	if gql__type_UpdateEmployeeWithGQLParams == nil {
		gql__type_UpdateEmployeeWithGQLParams = graphql.NewObject(graphql.ObjectConfig{
			Name: "Proto_Type_UpdateEmployeeWithGQLParams",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"name": &graphql.Field{
					Type: graphql.String,
				},
				"age": &graphql.Field{
					Type: graphql.Int,
				},
				"salary": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_UpdateEmployeeWithGQLParams
}

func Gql__type_ResponseGQL() *graphql.Object {
	if gql__type_ResponseGQL == nil {
		gql__type_ResponseGQL = graphql.NewObject(graphql.ObjectConfig{
			Name: "Proto_Type_ResponseGQL",
			Fields: graphql.Fields{
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_ResponseGQL
}

func Gql__type_InsertEmployeeWithGQLParams() *graphql.Object {
	if gql__type_InsertEmployeeWithGQLParams == nil {
		gql__type_InsertEmployeeWithGQLParams = graphql.NewObject(graphql.ObjectConfig{
			Name: "Proto_Type_InsertEmployeeWithGQLParams",
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"age": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"salary": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__type_InsertEmployeeWithGQLParams
}

func Gql__type_GetEmployeeWithIdWithGQLParams() *graphql.Object {
	if gql__type_GetEmployeeWithIdWithGQLParams == nil {
		gql__type_GetEmployeeWithIdWithGQLParams = graphql.NewObject(graphql.ObjectConfig{
			Name: "Proto_Type_GetEmployeeWithIdWithGQLParams",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__type_GetEmployeeWithIdWithGQLParams
}

func Gql__type_EmployeeListGQL() *graphql.Object {
	if gql__type_EmployeeListGQL == nil {
		gql__type_EmployeeListGQL = graphql.NewObject(graphql.ObjectConfig{
			Name: "Proto_Type_EmployeeListGQL",
			Fields: graphql.Fields{
				"employees": &graphql.Field{
					Type: graphql.NewList(Gql__type_EmployeeGQL()),
				},
			},
		})
	}
	return gql__type_EmployeeListGQL
}

func Gql__type_EmployeeGQL() *graphql.Object {
	if gql__type_EmployeeGQL == nil {
		gql__type_EmployeeGQL = graphql.NewObject(graphql.ObjectConfig{
			Name: "Proto_Type_EmployeeGQL",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.Int,
				},
				"name": &graphql.Field{
					Type: graphql.String,
				},
				"age": &graphql.Field{
					Type: graphql.Int,
				},
				"salary": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_EmployeeGQL
}

func Gql__type_DeleteEmployeeWithGQLParams() *graphql.Object {
	if gql__type_DeleteEmployeeWithGQLParams == nil {
		gql__type_DeleteEmployeeWithGQLParams = graphql.NewObject(graphql.ObjectConfig{
			Name: "Proto_Type_DeleteEmployeeWithGQLParams",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__type_DeleteEmployeeWithGQLParams
}

func Gql__input_UpdateEmployeeWithGQLParams() *graphql.InputObject {
	if gql__input_UpdateEmployeeWithGQLParams == nil {
		gql__input_UpdateEmployeeWithGQLParams = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Proto_Input_UpdateEmployeeWithGQLParams",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"age": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"salary": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_UpdateEmployeeWithGQLParams
}

func Gql__input_ResponseGQL() *graphql.InputObject {
	if gql__input_ResponseGQL == nil {
		gql__input_ResponseGQL = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Proto_Input_ResponseGQL",
			Fields: graphql.InputObjectConfigFieldMap{
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_ResponseGQL
}

func Gql__input_InsertEmployeeWithGQLParams() *graphql.InputObject {
	if gql__input_InsertEmployeeWithGQLParams == nil {
		gql__input_InsertEmployeeWithGQLParams = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Proto_Input_InsertEmployeeWithGQLParams",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"age": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"salary": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__input_InsertEmployeeWithGQLParams
}

func Gql__input_GetEmployeeWithIdWithGQLParams() *graphql.InputObject {
	if gql__input_GetEmployeeWithIdWithGQLParams == nil {
		gql__input_GetEmployeeWithIdWithGQLParams = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Proto_Input_GetEmployeeWithIdWithGQLParams",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__input_GetEmployeeWithIdWithGQLParams
}

func Gql__input_EmployeeListGQL() *graphql.InputObject {
	if gql__input_EmployeeListGQL == nil {
		gql__input_EmployeeListGQL = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Proto_Input_EmployeeListGQL",
			Fields: graphql.InputObjectConfigFieldMap{
				"employees": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_EmployeeGQL()),
				},
			},
		})
	}
	return gql__input_EmployeeListGQL
}

func Gql__input_EmployeeGQL() *graphql.InputObject {
	if gql__input_EmployeeGQL == nil {
		gql__input_EmployeeGQL = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Proto_Input_EmployeeGQL",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"age": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"salary": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_EmployeeGQL
}

func Gql__input_DeleteEmployeeWithGQLParams() *graphql.InputObject {
	if gql__input_DeleteEmployeeWithGQLParams == nil {
		gql__input_DeleteEmployeeWithGQLParams = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Proto_Input_DeleteEmployeeWithGQLParams",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__input_DeleteEmployeeWithGQLParams
}

// graphql__resolver_ManageEmployeeWithGQL is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_ManageEmployeeWithGQL struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_ManageEmployeeWithGQL creates pointer of service struct
func new_graphql_resolver_ManageEmployeeWithGQL(conn *grpc.ClientConn) *graphql__resolver_ManageEmployeeWithGQL {
	return &graphql__resolver_ManageEmployeeWithGQL{
		conn: conn,
		host: "localhost:8001",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_ManageEmployeeWithGQL) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_ManageEmployeeWithGQL) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"getEmployees": &graphql.Field{
			Type: Gql__type_EmployeeListGQL(),
			Args: graphql.FieldConfigArgument{},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetAllEmployeesWithGQLParams
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for getEmployees")
				}
				client := NewManageEmployeeWithGQLClient(conn)
				resp, err := client.GetAllEmployeesWithGQL(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetAllEmployeesWithGQL")
				}
				return resp, nil
			},
		},
		"insertEmployee": &graphql.Field{
			Type: Gql__type_ResponseGQL(),
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"age": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"salary": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req InsertEmployeeWithGQLParams
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for insertEmployee")
				}
				client := NewManageEmployeeWithGQLClient(conn)
				resp, err := client.InsertEmployeeWithGQL(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC InsertEmployeeWithGQL")
				}
				return resp, nil
			},
		},
		"updateEmployee": &graphql.Field{
			Type: Gql__type_ResponseGQL(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
				"name": &graphql.ArgumentConfig{
					Type:         graphql.String,
					DefaultValue: "",
				},
				"age": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"salary": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req UpdateEmployeeWithGQLParams
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for updateEmployee")
				}
				client := NewManageEmployeeWithGQLClient(conn)
				resp, err := client.UpdateEmployeeWithGQL(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC UpdateEmployeeWithGQL")
				}
				return resp, nil
			},
		},
		"deleteEmployee": &graphql.Field{
			Type: Gql__type_ResponseGQL(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req DeleteEmployeeWithGQLParams
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for deleteEmployee")
				}
				client := NewManageEmployeeWithGQLClient(conn)
				resp, err := client.DeleteEmployeeWithGQL(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC DeleteEmployeeWithGQL")
				}
				return resp, nil
			},
		},
		"getEmployeeWithId": &graphql.Field{
			Type: Gql__type_EmployeeGQL(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetEmployeeWithIdWithGQLParams
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for getEmployeeWithId")
				}
				client := NewManageEmployeeWithGQLClient(conn)
				resp, err := client.GetEmployeeWithIdWithGQL(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetEmployeeWithIdWithGQL")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_ManageEmployeeWithGQL) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterManageEmployeeWithGQLGraphqlHandler with *grpc.ClientConn manually.
func RegisterManageEmployeeWithGQLGraphql(mux *runtime.ServeMux) error {
	return RegisterManageEmployeeWithGQLGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service ManageEmployeeWithGQL {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterManageEmployeeWithGQLGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_ManageEmployeeWithGQL(conn))
}
